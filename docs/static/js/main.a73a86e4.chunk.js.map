{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","result","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","response","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2KAgCeA,EA7BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACDC,mBAAS,IADR,mBAC9BC,EAD8B,KAClBC,EADkB,KAYrC,OACI,8BACI,sBAAMC,SAPO,SAACC,GAClBA,EAAEC,iBACFN,GAAc,SAAAO,GAAI,OAAKL,GAAL,mBAAmBK,QAKjC,SACI,uBACIC,KAAK,OACLC,MAAOP,EACPQ,SAfU,SAACL,GACvBF,EAAcE,EAAEM,OAAOF,e,+BCPlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,0FAC4EC,UAAUH,GADtF,sBAEEI,MAAMF,GAFR,cAEbG,EAFa,gBAGIA,EAAOC,OAHX,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARvB,kBAWZM,GAXY,4CAAH,sDCiBLO,EAdK,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAE7B,OACI,sBAAKc,UAAU,OAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCsBDO,EA1BC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDN,SAACA,GAAc,IAAD,EACZZ,mBAAS,CAC/BmB,KAAK,GACLa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAUtC,OALAC,qBAAU,WACNxB,EAAQC,GAAUwB,MAAK,SAAAC,GAAQ,OAAIH,EAAS,CAACf,KAAKkB,EAAUL,SAAS,SACtE,CAACpB,IAGGqB,EDRiBK,CAAa1B,GAA9BO,EADuB,EACvBA,KAAMa,EADiB,EACjBA,QAEb,OACI,qCACI,6BAAKpB,IACJoB,EAAU,cAAc,eACzB,qBAAKJ,UAAU,YAAf,SAGQT,EAAKE,KAAI,SAAAC,GACL,OAAO,cAAC,EAAD,eAECA,GADCA,EAAIC,aEiBtBgB,EA7BM,WAAO,IAAD,EAEavC,mBAAS,CAAC,SAFvB,mBAEhBwC,EAFgB,KAEJzC,EAFI,KASvB,OACI,gCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACKyC,EAAWnB,KAAI,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MClB7B6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a73a86e4.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        setCategories(cats => [inputValue,...cats ])\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={inputValue}\r\n                    onChange={handleInputChange}\r\n                />\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=5cILnocb2iIjFWKML5Jg42gYv9r7bogP&q=${encodeURI(category)}&limit=10`;\r\n    const result = await fetch(url);\r\n    const { data } = await result.json();\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n    return gifs;\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst GifGridItem = ({id, title, url}) => {\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <img src={url} alt={title}  />\r\n            <p>{title}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nGifGridItem.propTypes = {\r\n    \r\n};\r\n\r\nexport default GifGridItem;","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GifGrid = ({ category }) => {\r\n    const {data, loading} = useFetchGifs(category); \r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n            {loading ? 'Cargando...':'Data cargada'}\r\n            <div className=\"card-grid\">\r\n\r\n                {\r\n                    data.map(img => {\r\n                        return <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    })\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nGifGrid.propTypes = {\r\n\r\n};\r\n\r\nexport default GifGrid;","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading: true\r\n    });\r\n    useEffect(() => {\r\n        getGifs(category).then(response => setstate({data:response, loading: false}))\r\n    }, [category]); //execute useEffect once, when the comp is rendered\r\n\r\n    // setTimeout(()=>{setstate({data:[1,2,3], loading: false})}, 2000)\r\n    return state;\r\n}","import React, { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['cat1']);\r\n\r\n    // const handleAdd = () => {\r\n    //     setcategories(cats => [...cats, 'nueva']);\r\n\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n\r\n            <ol>\r\n                {categories.map(category => (\r\n                    <GifGrid\r\n                        key={category}\r\n                        category={category}\r\n                    />\r\n                ))\r\n                }\r\n            </ol>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}